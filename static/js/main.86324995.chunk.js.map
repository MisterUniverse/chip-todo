{"version":3,"sources":["List.js","Items.js","App.js","serviceWorker.js","index.js"],"names":["List","this","props","inputElement","current","focus","react_default","a","createElement","className","onSubmit","addItem","placeholder","ref","value","currentItem","text","onChange","handleInput","type","Component","Items","createItems","item","key","onClick","_this","deleteItem","listItems","data","map","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","React","createRef","filteredItems","state","items","filter","setState","console","log","e","target","Date","now","preventDefault","newItem","toConsumableArray","concat","src_List","src_Items","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAyBeA,+LArBXC,KAAKC,MAAMC,aAAaC,QAAQC,yCAGhC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUT,KAAKC,MAAMS,SACzBL,EAAAC,EAAAC,cAAA,SACEI,YAAY,aACZC,IAAKZ,KAAKC,MAAMC,aAChBW,MAAOb,KAAKC,MAAMa,YAAYC,KAC9BC,SAAUhB,KAAKC,MAAMgB,cAEvBZ,EAAAC,EAAAC,cAAA,UAAQW,KAAK,UAAb,iBAfOC,aCgBJC,6MAfbC,YAAc,SAAAC,GACZ,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAKC,IAAKC,QAAS,kBAAMC,EAAKxB,MAAMyB,WAAWJ,EAAKC,OAC1DD,EAAKP,+EAKV,IACMY,EADW3B,KAAKC,MAAM2B,KACDC,IAAI7B,KAAKqB,aAEpC,OAAOhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWmB,UAZhBR,aC8DLW,cA1Db,SAAAA,IAAc,IAAAL,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAA/B,KAAA8B,IACZL,EAAAM,OAAAE,EAAA,EAAAF,CAAA/B,KAAA+B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAnC,QAFFE,aAAekC,IAAMC,YACPZ,EAWdC,WAAa,SAAAH,GACX,IAAMe,EAAgBb,EAAKc,MAAMC,MAAMC,OAAO,SAAAnB,GAC5C,OAAOA,EAAKC,MAAQA,IAEtBE,EAAKiB,SAAS,CACZF,MAAOF,IAETK,QAAQC,IAAI,kBAlBAnB,EAqBdR,YAAc,SAAA4B,GACZ,IACM/B,EAAc,CAAEC,KADL8B,EAAEC,OAAOjC,MACYU,IAAKwB,KAAKC,OAChDvB,EAAKiB,SAAS,CACZ5B,iBAzBUW,EA6Bdf,QAAU,SAAAmC,GACRA,EAAEI,iBACF,IAAMC,EAAUzB,EAAKc,MAAMzB,YAC3B,GAAqB,KAAjBoC,EAAQnC,KAAa,CACvB,IAAMyB,EAAKT,OAAAoB,EAAA,EAAApB,CAAON,EAAKc,MAAMC,OAAlBY,OAAA,CAAyBF,IACpCP,QAAQC,IAAIM,GACZzB,EAAKiB,SAAS,CACZF,MAAOA,EACP1B,YAAa,CAAEC,KAAM,GAAIQ,IAAK,MAGlCoB,QAAQC,IAAI,6BAtCZnB,EAAKc,MAAQ,CACXC,MAAO,GACP1B,YAAa,CACXC,KAAM,GACNQ,IAAK,KANGE,wEA4CZ,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8C,EAAD,CACE3C,QAASV,KAAKU,QACdR,aAAcF,KAAKE,aACnBe,YAAajB,KAAKiB,YAClBH,YAAad,KAAKuC,MAAMzB,cAE1BT,EAAAC,EAAAC,cAAC+C,EAAD,CAAO1B,KAAM5B,KAAKuC,MAAMC,MAAOd,WAAY1B,KAAK0B,qBAtDtCP,aCQEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.86324995.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass List extends Component {\r\n  componentDidUpdate() {\r\n    this.props.inputElement.current.focus();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"todoListMain\">\r\n        <div className=\"header\">\r\n          <form onSubmit={this.props.addItem}>\r\n            <input\r\n              placeholder=\"Enter Item\"\r\n              ref={this.props.inputElement}\r\n              value={this.props.currentItem.text}\r\n              onChange={this.props.handleInput}\r\n            />\r\n            <button type=\"submit\"> + </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;","import React, { Component } from \"react\";\r\n\r\nclass Items extends Component {\r\n  createItems = item => {\r\n    return (\r\n      <li key={item.key} onClick={() => this.props.deleteItem(item.key)}>\r\n        {item.text}\r\n      </li>\r\n    );\r\n  };\r\n  render() {\r\n    const todoData = this.props.data;\r\n    const listItems = todoData.map(this.createItems);\r\n\r\n    return <ul className=\"theList\">{listItems}</ul>;\r\n  }\r\n}\r\n\r\nexport default Items;","import React, { Component } from 'react';\r\nimport List from \"./List\";\r\nimport Items from \"./Items\";\r\n\r\nclass App extends Component {\r\n  inputElement = React.createRef();\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      items: [],\r\n      currentItem: {\r\n        text: \"\",\r\n        key: \"\"\r\n      }\r\n    }\r\n  }\r\n\r\n  deleteItem = key => {\r\n    const filteredItems = this.state.items.filter(item => {\r\n      return item.key !== key;\r\n    });\r\n    this.setState({\r\n      items: filteredItems\r\n    });\r\n    console.log(\"Item deleted!\");\r\n  };\r\n\r\n  handleInput = e => {\r\n    const itemText = e.target.value;\r\n    const currentItem = { text: itemText, key: Date.now() };\r\n    this.setState({\r\n      currentItem\r\n    });\r\n  };\r\n\r\n  addItem = e => {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    if (newItem.text !== \"\") {\r\n      const items = [...this.state.items, newItem];\r\n      console.log(newItem);\r\n      this.setState({\r\n        items: items,\r\n        currentItem: { text: \"\", key: \"\" }\r\n      });\r\n    }\r\n    console.log(\"Item successfully added!\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <List\r\n          addItem={this.addItem}\r\n          inputElement={this.inputElement}\r\n          handleInput={this.handleInput}\r\n          currentItem={this.state.currentItem}\r\n        />\r\n        <Items data={this.state.items} deleteItem={this.deleteItem} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}